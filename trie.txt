import java.util.*;
public class Main
{
    public static class trienode{
        Map<Character,trienode> children=new HashMap<>();
    }
    
    
    trienode root=new trienode();
    char endsymbol='*';
    
    
    public Main(String str){
        populateSuffix(str);
    }
    
  
    
    public void populateSuffix(String str){
        for(int i=0;i<str.length();i++){
             insertSuffix(i,str);
        }
    }
    
    public void insertSuffix(int i,String str){
        trienode node=root;
        for(int j=i;j<str.length();j++){
            char letter=str.charAt(j);
            if(!node.children.containsKey(letter)){
                trienode newnode=new trienode();
                node.children.put(letter,newnode);
            }
            node=node.children.get(letter);
        }
        node.children.put(endsymbol,null);
    }
    
    public boolean contain(String str){
        trienode node=root;
        for(int i=0;i<str.length();i++){
            char letter=str.charAt(i);
            if(!node.children.containsKey(letter)){
                return false;
            }
            
            node=node.children.get(letter);
        }
         return node.children.containsKey(endsymbol);
    }
    
    
   public void delete(String str) {
    deleteHelper(root, str, 0);
}

private boolean deleteHelper(trienode node, String str, int index) {
    if (index == str.length()) {
        if (!node.children.containsKey(endsymbol)) {
      
            return false; // End symbol does not exist, so the string is not present.
        }
        node.children.remove(endsymbol);
        return node.children.isEmpty(); // Return true if the node can be deleted.
    }
    
    char letter = str.charAt(index);
    trienode childNode = node.children.get(letter);
    System.out.println(index);
    if (childNode == null) {
        System.out.println("hey");
        return false; // The character is not in the trie.
    }
    boolean canDeleteChild = deleteHelper(childNode, str, index + 1);
   
    if (canDeleteChild) {
         System.out.println("Back from recursion with index: " + index+ canDeleteChild+letter);
        node.children.remove(letter);
        return node.children.isEmpty(); // Return true if the node can be deleted.
    }
    System.out.println("hey"+index+canDeleteChild);
    return false;
}

    
	public static void main(String[] args) {
		Main main=new Main("mann");
		System.out.println(main.contain("n"));
	   main.delete("nn");
    System.out.println(main.contain("ann")); // Should print 'false'
    System.out.println(main.contain("nn")); // Should print 'true'
    System.out.println(main.contain("n")); // Should print 'true'
	}
}
